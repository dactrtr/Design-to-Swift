<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diff</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import SwiftUI
import PlaygroundSupport
func haptic(){
        UINotificationFeedbackGenerator().notificationOccurred(.success)
}
struct lekanMenu: View {
    @State var isPress =  false
    @State var isActive = false
    @State var selected = 0
    var body: some View {
        GeometryReader { geo in
            ZStack {
                Color(red: 0.9603543878, green: 0.9548740983, blue: 0.9726663232)
                Color(red: 0.5843137503, green: 0.8235294223, blue: 0.4196078479)
                    .frame(width: 160, height: 160)
                    .opacity(0.5)
                    .clipShape(RoundedRectangle(cornerRadius: 32))
                    .rotationEffect(Angle.degrees(self.isActive ? 180 : 0))
                    .position(x: 0, y: geo.size.height/2)
                    .animation(Animation.spring().delay(0.001))
                Color(#colorLiteral(red: 0.807843137254902, green: 0.027450980392156862, blue: 0.3333333333333333, alpha: 1.0))
                    .frame(width: self.isActive ? 32 : 180, height: self.isActive ? 32 : 12)
                    .clipShape(RoundedRectangle(cornerRadius: self.isActive ? 25.0:8.0))
                    .position(x: 60, y: geo.size.height-20)
                    .opacity(0.5)
                    .animation(Animation.spring().delay(0.001))
                Color(#colorLiteral(red: 0.807843137254902, green: 0.027450980392156862, blue: 0.3333333333333333, alpha: 1.0))
                    .frame(width: 160, height: 160)
                    .opacity(0.3)
                    .clipShape(RoundedRectangle(cornerRadius: 25.0))
                    .rotationEffect(Angle.degrees(self.isActive ? 180 : 0))
                    .position(x: geo.size.width, y: geo.size.height+40)
                    .animation(Animation.spring().delay(0.001))
                ZStack {
                    Color(#colorLiteral(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0))
                        .frame(maxWidth:.infinity,maxHeight:.infinity)
                        .opacity(0.8)
                        .clipShape(RoundedRectangle(cornerRadius: 32))
                        .scaleEffect(self.isPress ? 0.98 : 1)
                        .animation(Animation.spring().delay(0.002))
                        .shadow(color: Color.black.opacity(0.15), radius: 12, x: 0, y: 8)
                    ZStack(alignment: .bottom) {
                        Color(red: 0.9455506206, green: 0.9443212152, blue: 0.9837133288)
                            .frame(maxWidth:.infinity,maxHeight:.infinity)
                            .clipShape(RoundedRectangle(cornerRadius:32))
                            .scaleEffect(self.isPress ? 0.94 : 1)
                            .animation(Animation.spring().delay(0.001))
                            .shadow(color: Color.black.opacity(0.15), radius: 12, x: 0, y: 8)
                        menuBar(isActive: self.$isActive, isPress: self.$isPress, selected: 0)
                            .padding(.bottom, self.isPress ? 24:0)
                    }
                        
                    .padding(16)
                    .edgesIgnoringSafeArea(.all)
                }
                .padding(.bottom,16)
                .frame(width:geo.size.width-32,height:geo.size.height-64)
                
            }
            .edgesIgnoringSafeArea(.all)
        }
        //          .frame(width:375,height:596)
    }
}


struct menuBar: View {
    @Binding var isActive : Bool
    @Binding var isPress : Bool
    @State var selected : Int
    var body: some View {
        HStack(spacing: 48.0) {
            
            Button(action: {
                self.isPress.toggle()
                self.isActive.toggle()
                DispatchQueue.main.asyncAfter(deadline:.now()+0.2) {
                    self.isPress.toggle()
                    self.selected = 1
                    haptic()
                }
            }) {
                LinearGradient(gradient: Gradient(colors: self.selected == 1 ? [Color(#colorLiteral(red: 0.9098039269, green: 0.4784313738, blue: 0.6431372762, alpha: 1)), Color(#colorLiteral(red: 0.8549019694, green: 0.250980407, blue: 0.4784313738, alpha: 1))]:[Color(#colorLiteral(red: 0.8039215803, green: 0.8039215803, blue: 0.8039215803, alpha: 1)),Color(#colorLiteral(red: 0.8039215803, green: 0.8039215803, blue: 0.8039215803, alpha: 1))]), startPoint: .bottom, endPoint: .top)
                    .mask(
                        Image(systemName: self.selected == 1 ? "house.fill" : "house")
                            .font(.system(size: 24, weight: .semibold, design: .rounded))
                            .frame(alignment: .center)
                )
                    .frame(width: 36, height: 36)
                    .scaleEffect(self.isPress ? 1.2:1)
                    .shadow(color: Color(#colorLiteral(red: 0.8549019694, green: 0.250980407, blue: 0.4784313738, alpha: 1)).opacity(self.selected == 1 ? 0.5:0), radius: 3, x: 0, y: 3)
                    .animation(Animation.spring())
            }
            
            Button(action: {
                self.isPress.toggle()
                self.isActive.toggle()
                DispatchQueue.main.asyncAfter(deadline:.now()+0.2) {
                    self.isPress.toggle()
                    self.selected = 2
                    haptic()
                }
            }) {
                LinearGradient(gradient: Gradient(colors: self.selected == 2 ? [Color(#colorLiteral(red: 0.4745098054, green: 0.8392156959, blue: 0.9764705896, alpha: 1)), Color(#colorLiteral(red: 0.2392156869, green: 0.6745098233, blue: 0.9686274529, alpha: 1))]:[Color(#colorLiteral(red: 0.8039215803, green: 0.8039215803, blue: 0.8039215803, alpha: 1)),Color(#colorLiteral(red: 0.8039215803, green: 0.8039215803, blue: 0.8039215803, alpha: 1))]), startPoint: .bottom, endPoint: .top)
                    .mask(
                        Image(systemName: self.selected == 2 ? "gamecontroller.fill" : "gamecontroller")
                            .font(.system(size: 24, weight: .semibold, design: .rounded))
                            .frame(alignment: .center)
                )
                    .frame(width: 36, height: 36)
                    .scaleEffect(self.isPress ? 1.2:1)
                    .shadow(color: Color(#colorLiteral(red: 0.2392156869, green: 0.6745098233, blue: 0.9686274529, alpha: 1)).opacity(self.selected == 2 ? 0.5:0), radius: 3, x: 0, y: 3)
                    .animation(Animation.spring())
            }
            
            Button(action: {
                self.isPress.toggle()
                self.isActive.toggle()
                DispatchQueue.main.asyncAfter(deadline:.now()+0.2) {
                    self.isPress.toggle()
                    self.selected = 3
                    haptic()
                }
            }) {
                LinearGradient(gradient: Gradient(colors: self.selected == 3 ? [Color(#colorLiteral(red: 0.5843137503, green: 0.8235294223, blue: 0.4196078479, alpha: 1)), Color(#colorLiteral(red: 0.4666666687, green: 0.7647058964, blue: 0.2666666806, alpha: 1))]:[Color(#colorLiteral(red: 0.8039215803, green: 0.8039215803, blue: 0.8039215803, alpha: 1)),Color(#colorLiteral(red: 0.8039215803, green: 0.8039215803, blue: 0.8039215803, alpha: 1))]), startPoint: .bottom, endPoint: .top)
                    .mask(
                        Image(systemName: self.selected == 3 ? "message.fill" : "message")
                            .font(.system(size: 24, weight: .semibold, design: .rounded))
                            .frame(alignment: .center)
                )
                    .frame(width: 36, height: 36)
                    .scaleEffect(self.isPress ? 1.2:1)
                    .shadow(color: Color(#colorLiteral(red: 0.4666666687, green: 0.7647058964, blue: 0.2666666806, alpha: 1)).opacity(self.selected == 3 ? 0.5:0), radius: 3, x: 0, y: 3)
                    .animation(Animation.spring())
            }
            
            Button(action: {
                self.isPress.toggle()
                self.isActive.toggle()
                DispatchQueue.main.asyncAfter(deadline:.now()+0.2) {
                    self.isPress.toggle()
                    self.selected = 4
                    haptic()
                }
            }) {
                LinearGradient(gradient: Gradient(colors: self.selected == 4 ? [Color(#colorLiteral(red: 0.9568627477, green: 0.6588235497, blue: 0.5450980663, alpha: 1)), Color(#colorLiteral(red: 0.9372549057, green: 0.3490196168, blue: 0.1921568662, alpha: 1))]:[Color(#colorLiteral(red: 0.8039215803, green: 0.8039215803, blue: 0.8039215803, alpha: 1)),Color(#colorLiteral(red: 0.8039215803, green: 0.8039215803, blue: 0.8039215803, alpha: 1))]), startPoint: .bottom, endPoint: .top)
                    .mask(
                        Image(systemName: self.selected == 4 ? "tag.fill" : "tag")
                            .font(.system(size: 24, weight: .semibold, design: .rounded))
                            .frame(alignment: .center)
                )
                    .frame(width: 36, height: 36)
                    .scaleEffect(self.isPress ? 1.2:1)
                    .shadow(color: Color(#colorLiteral(red: 0.9372549057, green: 0.3490196168, blue: 0.1921568662, alpha: 1)).opacity(self.selected == 4 ? 0.5:0), radius: 3, x: 0, y: 3)
                    .animation(Animation.spring())
            }
        }
        .padding(.all, 16)
        .background(Color(#colorLiteral(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0)))
        .clipShape(RoundedRectangle(cornerRadius: 32, style: .continuous))
        .offset(y: self.isPress ? -16 : 0)
        .scaleEffect(self.isPress ? 0.9 : 1)
        .animation(Animation.spring().delay(0.001))
    }
}

PlaygroundPage.current.setLiveView(
    lekanMenu()
        .frame(width:375,height:296)
        .background(Color.white)
        .cornerRadius(32)
)

</string>
			<key>ModifiedRange</key>
			<string>{1, 9895}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{1, 0}</string>
		</dict>
	</array>
	<key>File</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/My Playground.playgroundpage/main.swift</string>
</dict>
</plist>
